generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  email                   String    @unique(map: "email_1")
  forgotPasswordToken     String?
  name                    String
  password                String
  refreshToken            String?
  verify                  Boolean   @default(false)
  verifyEmailToken        String?

  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  // relationships
  favoriteLists           FavoriteList?
  watchLists              WatchList[]   

  @@map("users")
}

model FavoriteList {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId @unique
  movies      String[]    @default([])

  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favoritelists")
}

model WatchList {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String      @db.ObjectId
  movies        String[]    @default([])

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // relationships
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("watchlists")
}

model Movie {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  adult              Boolean
  backdropPath       String?             @map("backdrop_path")
  budget             Int
  categories         String[]
  tmdb_id            Int                 @unique @map("id")
  originalLanguage   String              @map("original_language")
  originalTitle      String              @map("original_title")
  overview           String?
  popularity         Float
  posterPath         String?             @map("poster_path")
  releaseDate        String              @map("release_date")
  revenue            Int
  runtime            Int?
  status             String
  tagline            String?
  title              String
  video              Boolean
  voteAverage        Float               @map("vote_average")
  voteCount          Int                 @map("vote_count")
  
  genreIDs           String[]   @db.ObjectId
  genres             Genre[]    @relation(fields: [genreIDs], references: [id])

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

model Genre {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  tmdb_id Int  @unique @map("id")

  movieIDs     String[]   @db.ObjectId
  movies       Movie[]    @relation(fields: [movieIDs], references: [id])

  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}
